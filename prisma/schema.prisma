datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ROLE {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          ROLE      @default(USER)
  links         Link[]

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Link {
  id         String    @id @default(cuid())
  userId     String
  url        String
  customUrl  String    @unique
  faviconUrl String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  clicks     Click[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Click {
  id          String   @id @default(cuid())
  linkId      String
  country     String   @default("Unknown")
  region      String   @default("Unknown")
  city        String   @default("Unknown")
  latitude    Float    @default(0)
  longitude   Float    @default(0)
  countryCode String   @default("Unknown")
  regionCode  String   @default("Unknown")
  clickedAt   DateTime @default(now())
  ip          String   @default("Unknown")

  link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)
}
